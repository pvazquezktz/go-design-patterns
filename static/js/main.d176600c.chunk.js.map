{"version":3,"sources":["components/new-menu.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","content","flexGrow","padding","ResponsiveDrawer","props","container","classes","useTheme","React","useState","mobileOpen","setMobileOpen","handleDrawerToggle","className","Divider","List","map","text","index","ListItem","key","component","Link","to","ListItemIcon","ListItemText","primary","CssBaseline","AppBar","position","Toolbar","IconButton","color","aria-label","edge","onClick","Typography","variant","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","exact","path","render","App","rel","href","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d176600c.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: \"flex\"\n    },\n    drawer: {\n        [theme.breakpoints.up(\"sm\")]: {\n            width: drawerWidth,\n            flexShrink: 0\n        }\n    },\n    appBar: {\n        marginLeft: drawerWidth,\n        [theme.breakpoints.up(\"sm\")]: {\n            width: `calc(100% - ${drawerWidth}px)`\n        }\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up(\"sm\")]: {\n            display: \"none\"\n        }\n    },\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n        width: drawerWidth\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3)\n    }\n}));\n\nfunction ResponsiveDrawer(props) {\n    const { container } = props;\n    const classes = useStyles();\n    const theme = useTheme();\n    const [mobileOpen, setMobileOpen] = React.useState(false);\n\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n\n    const drawer = (\n        <div>\n            <div className={classes.toolbar} />\n            <Divider />\n            <List>\n                {[\"Inbox\", \"Starred\"].map((text, index) => (\n                    <ListItem key={text} component={Link} to={\"/\" + text}>\n                        <ListItemIcon>\n                            {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                        </ListItemIcon>\n                        <ListItemText primary={text} />\n                    </ListItem>\n                ))}\n            </List>\n        </div>\n    );\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        edge=\"start\"\n                        onClick={handleDrawerToggle}\n                        className={classes.menuButton}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Responsive drawer\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <BrowserRouter>\n                <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                    {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                    <Hidden smUp implementation=\"css\">\n                        <Drawer\n                            container={container}\n                            variant=\"temporary\"\n                            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                            open={mobileOpen}\n                            onClose={handleDrawerToggle}\n                            classes={{\n                                paper: classes.drawerPaper\n                            }}\n                            ModalProps={{\n                                keepMounted: true // Better open performance on mobile.\n                            }}\n                        >\n                            {drawer}\n                        </Drawer>\n                    </Hidden>\n                    <Hidden xsDown implementation=\"css\">\n                        <Drawer\n                            classes={{\n                                paper: classes.drawerPaper\n                            }}\n                            variant=\"permanent\"\n                            open\n                        >\n                            {drawer}\n                        </Drawer>\n                    </Hidden>\n                </nav>\n\n                <main className={classes.content}>\n                    <div className={classes.toolbar} />\n\n                    <Switch>\n                        <Route exact path=\"/\" render={() => <div>Home Page</div>} />\n                        <Route path=\"/Inbox\" render={() => <div> Page inbox</div>} />\n                        <Route path=\"/Starred\" render={() => <div>Page starred</div>} />\n                    </Switch>\n                </main>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nResponsiveDrawer.propTypes = {\n    /**\n     * Injected by the documentation to work in an iframe.\n     * You won't need it on your project.\n     */\n    container: PropTypes.instanceOf(\n        typeof Element === \"undefined\" ? Object : Element\n    )\n};\n\nexport default ResponsiveDrawer;\n","import React from 'react';\nimport './App.css';\nimport Menu from \"./components/new-menu\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"/>\n            <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n{/*<PersistentDrawerLeft/>*/}\n{/*<PersistentDrawerLeft2/>*/}\n{/*<Probando initialText={'ESTE ES EL TEXTO INICIAL'}/>*/}\n{/*<Menu/>*/}\n<Menu/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}